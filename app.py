# Importation des biblioth√®ques n√©cessaires
import streamlit as st  # Pour cr√©er une interface web interactive
import pandas as pd  # Pour manipuler les donn√©es du fichier CSV
import matplotlib.pyplot as plt  # Pour cr√©er les graphiques
from matplotlib.backends.backend_pdf import PdfPages  # Pour g√©n√©rer un fichier PDF contenant les figures
import io  # Pour cr√©er un fichier PDF en m√©moire (sans l'enregistrer sur le disque)

# Titre principal de l'application
st.title("üìä Visualisation de mesures CSV")

# Interface pour importer un fichier CSV depuis l'ordinateur de l'utilisateur
uploaded_file = st.file_uploader("Choisir un fichier CSV", type="csv")

# Si un fichier a √©t√© s√©lectionn√© :
if uploaded_file:
    # Lecture du fichier CSV avec s√©parateur ";" et encodage UTF-8
    df = pd.read_csv(uploaded_file, sep=';', encoding='utf-8')

    # Suppression des √©ventuels espaces autour des noms de colonnes
    df.columns = df.columns.str.strip()

    # Cr√©ation d'une colonne datetime unique √† partir des colonnes "Date" et "Heure"
    df["Timestamp"] = pd.to_datetime(df["Date"] + " " + df["Heure"], errors="coerce", dayfirst=True)

    # Suppression des colonnes "Date" et "Heure" devenues inutiles
    df.drop(columns=["Date", "Heure"], inplace=True)

    # Suppression des lignes dont le timestamp est invalide (non interpr√©table)
    df = df.dropna(subset=["Timestamp"])

    # Suppression des lignes vides (sauf la colonne Timestamp)
    df = df.dropna(how='all', subset=df.columns.difference(['Timestamp']))

    # D√©tection des colonnes par type (Temp√©rature, Tension, Courant)
    colonnes_temp = [col for col in df.columns if "Temp" in col]
    colonnes_tension = [col for col in df.columns if "Tension" in col]
    colonnes_courant = [col for col in df.columns if "Courant" in col]

    # Cr√©ation d'un fichier PDF en m√©moire (pas encore t√©l√©charg√©)
    pdf_buffer = io.BytesIO()
    with PdfPages(pdf_buffer) as pdf:
        # Boucle sur toutes les colonnes s√©lectionn√©es
        for col in colonnes_temp + colonnes_tension + colonnes_courant:
            # On r√©cup√®re la colonne de mesure + timestamp, et on enl√®ve les lignes vides
            data = df[["Timestamp", col]].dropna()

            # Si la colonne est une tension ou un courant (mesure √† haute fr√©quence)
            if col in colonnes_tension + colonnes_courant:
                # On arrondit les timestamps √† la seconde pr√®s
                data["Seconde"] = data["Timestamp"].dt.floor("S")

                # On fait la moyenne des valeurs par seconde
                data = data.groupby("Seconde")[col].mean().reset_index()

                # On applique une moyenne glissante (rolling mean) pour lisser les donn√©es
                data[col] = data[col].rolling(window=5, center=True).mean()

                # On utilisera les secondes comme axe x
                temps = data["Seconde"]
            else:
                # Pour les temp√©ratures (1 point par minute), on garde les timestamps d‚Äôorigine
                temps = data["Timestamp"]

            # Cr√©ation du graphique
            plt.figure()
            plt.plot(temps, data[col], marker='o')  # Courbe avec points visibles
            plt.title(col)  # Titre = nom de la mesure
            plt.xlabel("Temps")  # L√©gende de l‚Äôaxe des x
            plt.ylabel(col)  # L√©gende de l‚Äôaxe des y
            plt.xticks(rotation=45)  # Rotation des dates sur l‚Äôaxe x

            # On affiche la date dans le coin inf√©rieur gauche (hors de l‚Äôaxe)
            if not data.empty:
                date_affichee = data.iloc[0]['Seconde'] if "Seconde" in data else data.iloc[0]['Timestamp']
                plt.figtext(0.01, 0.01, f"Date: {date_affichee.strftime('%d/%m/%Y')}", ha="left", fontsize=9)

            plt.tight_layout()  # Ajustement automatique pour √©viter les chevauchements
            pdf.savefig()  # Ajout du graphique au PDF
            plt.close()  # Fermeture de la figure (bonne pratique pour lib√©rer de la m√©moire)

    # Message de succ√®s dans l‚Äôinterface utilisateur
    st.success("‚úÖ PDF g√©n√©r√© avec succ√®s !")

    # Bouton de t√©l√©chargement du fichier PDF g√©n√©r√©
    st.download_button("üì• T√©l√©charger le PDF", data=pdf_buffer.getvalue(),
                       file_name="mesures_plots.pdf", mime="application/pdf")
